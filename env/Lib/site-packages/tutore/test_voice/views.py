from django.contrib.auth import login, authenticate
from django.shortcuts import render
from django.contrib import messages
from django.shortcuts import render, redirect
from .import forms
from .models import User
from django.contrib.auth.decorators import login_required


# Importation pour l'utilisation de l'audio
from .audio import music
from .news import *
from .selenium_w import infow
import datetime

import pyttsx3 as p
import speech_recognition as sr
import locale

# Définir la langue par défaut en français
locale.setlocale(locale.LC_TIME, 'fr_FR.UTF-8')

# fin de l'importation


def login_page(request):
    form = forms.LoginForm()
    message = ''
    if request.method == 'POST':
        username = request.POST['username']
        password = request.POST['password']
        form = forms.LoginForm(request.POST)
        user = authenticate(request, username=username, password=password)
        if user is not None:
            login(request, user)
            # form.save()
            return redirect('home')
        else:
            messages.error(request, ("Identifiants invalides..."))
            return redirect('login')  
    return render(
        request, 'test_voice/login.html', context={'form': form, 'message': message})

def contient_chiffre(chaine):
    for caractere in chaine:
        if caractere.isdigit():
            return True
    return False  

def signup_page(request):
    form = forms.SignUpForm()
    if request.method == 'POST':
        form = forms.SignUpForm(request.POST)
        username = request.POST['username']
        password = request.POST['password']
        password1 = request.POST['password1']
        email = request.POST['email']
        if password1 != password and contient_chiffre(username) :
           messages.success(request, ("Impossible de créer le compte"))
           return redirect('signup')
        elif contient_chiffre(username) :
           messages.success(request, ("Veuillez entrer un nom valide"))
           return redirect('signup')
        elif password1 != password :
           messages.success(request, ("Confirmer bien votre mot de passe"))
           return redirect('signup')
        else :
            user = User.objects.create_user(username=username, password=password, password1=password1, email=email)
            #user = User.objects.create_user(username=username, password=password)
            user.save()
            login(request, user)
            return redirect('home')
    return render(request, 'test_voice/signup.html', context={'form': form})

@login_required
def home_page(request):
    return render(request, 'test_voice/home.html')

@login_required
def voice_test(request):
    
    engine = p.init()
    rate = engine.getProperty('rate')
    engine.setProperty('rate', 180)
    voices = engine.getProperty('voices')
    engine.setProperty('voices',voices[0].id)

    def speak(text):
        engine.say(text)
        engine.runAndWait()

    today = datetime.datetime.now()

    #formatted_date = today.strftime("%A, %d %B %Y")
    
    speak("Bonjour Monsieur je suis ton assistant vocal")
    #speak("Aujourd'hui est le {}".format(formatted_date))
    
    speak("Que puis-je faire pour vous ?")

    r = sr.Recognizer()

    #with sr.Microphone() as source :
        #r.energy_threshold = 10000
        #r.adjust_for_ambient_noise(source,1.2)
        #speak("Que puis-je faire pour vous ?")
        #audio = r.listen(source)
        #try:
            #text = r.recognize_google(audio, language='fr-FR')
        #except sr.UnknownValueError:
            #speak("Valeur inconnue, il doit y avoir trop de bruit")
            #return redirect('home')
        
    #if "comment" and "tu" and "vas" in text :
        #speak("Je vais bien")
    #speak("Que puis-je faire pour vous ?")

    with sr.Microphone() as source :
        r.energy_threshold = 10000
        r.adjust_for_ambient_noise(source,1.2)
        speak('J\'écoute...')
        audio = r.listen(source)    
        try:
            text2 = r.recognize_google(audio, language='fr-FR')
        except sr.UnknownValueError:
            speak("Valeur inconnue, il doit y avoir trop de bruit")
            return redirect('home')

        
    if "information" in text2:
        speak("Vous voulez des informations concernant quel sujet ?")
        
        with sr.Microphone() as source :
            r.energy_threshold = 10000
            r.adjust_for_ambient_noise(source,1.2)
            speak('J\'écoute...')
            audio = r.listen(source)
            try:
                infor = r.recognize_google(audio, language='fr-FR')
                assist = music()
                assist.play(infor)
            except sr.UnknownValueError:
                    speak("Valeur inconnue, il doit y avoir trop de bruit")
                    return redirect('home')
        #print("Recherche de {} dans wikipedia".format(infor))
        #speak("Recherche de {} dans wikipedia".format(infor))

    
    return render(request, 'test_voice/home.html')